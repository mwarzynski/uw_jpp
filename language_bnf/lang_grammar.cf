comment "//" ;

token TokenBool {"true"} | {"false"} ;

Prog.    Program  ::= [Decl] ;

DStruct.   Decl ::= Struct ;
DFunction. Decl ::= Function ;
DVar.      Decl ::= Var ";" ;

DVarS.     Var ::= VarS ;
DVarE.     Var ::= VarE ;

IStruct. Struct ::= "struct" Ident "{" [VarS] "}" ;

FunOne.  Function ::= "fn" Ident "(" [Var] ")" ":" Type "{" [Stm] "}" ;
FunStr.  Function ::= "fn" Ident "(" [Var] ")" ":" Ident "{" [Stm] "}" ;
FunNone. Function ::= "fn" Ident "(" [Var] ")" ":" "{" [Stm] "}" ;

Dec.       VarS     ::= Ident ":" Type ;
DecMany.   VarS     ::= [Ident] ":" Type ;
DecSet.    VarS     ::= Ident ":" Type "=" Exp2 ;
DecStruct. VarE     ::= Ident ":" Ident ;
DecDict.   VarE     ::= Ident ":" "{" Type "->" Type "}" ; 

DecArr.        VarE   ::= Ident ":" "[" Type "]" "=" "[" [Exp] "]"; 
DecArrMul.     VarE   ::= Ident ":" "[" Type "*" Integer "]"; 
DecArrMulInit. VarE   ::= Ident ":" "[" Type "*" Integer "]" "=" "[" Exp "," ".." "]"; 

terminator Stm "" ;

separator  Decl "" ;
separator  VarS "," ;
separator  VarE "," ;
separator  Var  "," ;
separator  nonempty Ident "," ;

SFunc.   Stm ::= Function ;
SDecl.   Stm ::= Var ";" ;
SExp.    Stm ::= Exp ";" ;
SBlock.  Stm ::= "{" [Stm] "}" ;
SWhile.  Stm ::= "while"  Exp  Stm ;
SForD.   Stm ::= "for" VarS "," Exp "," Exp Stm ;
SForE.   Stm ::= "for" Exp "," Exp "," Exp Stm ;
SIf.     Stm ::= "if" Exp  Stm ;
SIfElse. Stm ::= "if" Exp  Stm "else" Stm ;

SReturnOne.    Stm ::= "return" Exp ";" ;
SReturnStruct. Stm ::= "return" Ident ";" ;
SReturn.       Stm ::= "return" ";" ;

SJContinue. Stm ::= "continue" ";" ;
SJBreak.    Stm ::= "break" ";" ;

EAss.    Exp  ::= Ident "=" Exp2 ;
EAssArr. Exp  ::= Ident "[" Exp3 "]" "=" Exp2 ;
EAssStr. Exp  ::= Ident "." Ident "=" Exp2 ;

EEPlus.  Exp1 ::= Ident "+=" Exp2 ;
EEMinus. Exp1 ::= Ident "-=" Exp2 ;
EPPlus.  Exp1 ::= Ident "++" ;
EMMinus. Exp1 ::= Ident "--" ;

ElOr.    Exp2  ::= Exp2 "||" Exp2;
ElAnd.   Exp2  ::= Exp2 "&&" Exp2;

ELt.     Exp2 ::= Exp2 "<" Exp2 ;
ELt2.    Exp2 ::= Exp2 "<" Exp2 "<" Exp2 ;
EGt.     Exp2 ::= Exp2 ">" Exp2 ;
EGt2.    Exp2 ::= Exp2 ">" Exp2 ">" Exp2 ;
EEq.     Exp2 ::= Exp2 "==" Exp2 ;
ENEq.    Exp2 ::= Exp2 "!=" Exp2 ;
EEqIs.   Exp2 ::= Exp2 "is" Exp2 ;
EAdd.    Exp3 ::= Exp3 "+" Exp3 ;
ESub.    Exp3 ::= Exp3 "-" Exp3 ;
EMul.    Exp3 ::= Exp3 "*" Exp3 ;
EDiv.    Exp3 ::= Exp3 "/" Exp3 ;
ENeg.    Exp4 ::= "-" Exp4 ;
EPos.    Exp4 ::= "+" Exp4 ;
Call.    Exp4 ::= Ident "(" [Exp] ")" ;
EVarArr. Exp4 ::= Ident "[" Exp "]" ;
EStrAtt. Exp4 ::= Ident "." Ident ;
EVar.    Exp4 ::= Ident ;
EStr.    Exp4 ::= String ;
EI32.    Exp4 ::= Integer ;
EI64.    Exp4 ::= Integer ;
EF32.    Exp4 ::= Double ;
EF64.    Exp4 ::= Double ;
EBool.   Exp4 ::= TokenBool ;

coercions Exp 4 ;

separator Exp "," ;

TI32.  Type ::= "i32" ;
TI64.  Type ::= "i64" ;
TF32.  Type ::= "f32" ;
TF64.  Type ::= "f64" ;
TStr.  Type ::= "str" ;
TBool. Type ::= "bool" ;

separator Type  "," ;
