

module AbsGrammar where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
newtype TokenBool = TokenBool String deriving (Eq, Ord, Show, Read)
data Program = Prog [Decl]
  deriving (Eq, Ord, Show, Read)

data Decl = DStruct Struct | DFunction Function | DVar Var
  deriving (Eq, Ord, Show, Read)

data Var = DVarOnly VarOnly | DVarExpr VarExpr
  deriving (Eq, Ord, Show, Read)

data Struct = IStruct Ident [VarOnly]
  deriving (Eq, Ord, Show, Read)

data Function
    = FunOne Ident [Var] Type [Stm]
    | FunStr Ident [Var] Ident [Stm]
    | FunNone Ident [Var] [Stm]
  deriving (Eq, Ord, Show, Read)

data VarOnly
    = Dec Ident Type
    | DecStruct Ident Ident
    | DecDict Ident Type Type
    | DecArrMul Ident Type Integer
  deriving (Eq, Ord, Show, Read)

data VarExpr
    = DecSet Ident Type Exp
    | DecArr Ident Type [Exp]
    | DecArrMulInit Ident Type Integer Exp
  deriving (Eq, Ord, Show, Read)

data Stm
    = SFunc Function
    | SDecl Var
    | SExp Exp
    | SBlock [Stm]
    | SWhile Exp Stm
    | SForD VarOnly Exp Exp Stm
    | SForE Exp Exp Exp Stm
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | SReturnOne Exp
    | SReturn
    | SJContinue
    | SJBreak
  deriving (Eq, Ord, Show, Read)

data Exp
    = EAss Ident Exp
    | EAssArr Ident Exp Exp
    | EAssStr Ident Ident Exp
    | EEPlus Ident Exp
    | EEMinus Ident Exp
    | ElOr Exp Exp
    | ElAnd Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | ELt Exp Exp
    | ELtE Exp Exp
    | ELt2 Exp Exp Exp
    | EGt Exp Exp
    | EGtE Exp Exp
    | EGt2 Exp Exp Exp
    | EAdd Exp Exp
    | ESub Exp Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | Call Ident [Exp]
    | EVarArr Ident Exp
    | EStrAtt Ident Ident
    | EPPos Ident
    | EMMin Ident
    | EBNeg Exp
    | ENeg Exp
    | EPos Exp
    | EVar Ident
    | EStr String
    | EInt Integer
    | EFloat Double
    | EBool TokenBool
  deriving (Eq, Ord, Show, Read)

data Type = TInt | TFloat | TStr | TBool
  deriving (Eq, Ord, Show, Read)

