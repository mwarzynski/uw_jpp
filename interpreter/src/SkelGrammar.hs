module SkelGrammar where

-- Haskell module generated by the BNF converter

import AbsGrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident string -> failure x
transTokenBool :: TokenBool -> Result
transTokenBool x = case x of
  TokenBool string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  Prog decls -> failure x
transDecl :: Decl -> Result
transDecl x = case x of
  DStruct struct -> failure x
  DFunction function -> failure x
  DVar var -> failure x
transVar :: Var -> Result
transVar x = case x of
  DVarS vars -> failure x
  DVarE vare -> failure x
transStruct :: Struct -> Result
transStruct x = case x of
  IStruct ident varss -> failure x
transFunction :: Function -> Result
transFunction x = case x of
  FunOne ident vars type_ stms -> failure x
  FunStr ident1 vars ident2 stms -> failure x
  FunNone ident vars stms -> failure x
transVarS :: VarS -> Result
transVarS x = case x of
  Dec ident type_ -> failure x
  DecMany idents type_ -> failure x
  DecSet ident type_ exp -> failure x
transVarE :: VarE -> Result
transVarE x = case x of
  DecStruct ident1 ident2 -> failure x
  DecDict ident type_1 type_2 -> failure x
  DecArr ident type_ exps -> failure x
  DecArrMul ident type_ integer -> failure x
  DecArrMulInit ident type_ integer exp -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SFunc function -> failure x
  SDecl var -> failure x
  SExp exp -> failure x
  SBlock stms -> failure x
  SWhile exp stm -> failure x
  SForD vars exp1 exp2 stm -> failure x
  SForE exp1 exp2 exp3 stm -> failure x
  SIf exp stm -> failure x
  SIfElse exp stm1 stm2 -> failure x
  SReturnOne exp -> failure x
  SReturnStruct ident -> failure x
  SReturn -> failure x
  SJContinue -> failure x
  SJBreak -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EAss ident exp -> failure x
  EAssArr ident exp1 exp2 -> failure x
  EAssStr ident1 ident2 exp -> failure x
  EEPlus ident exp -> failure x
  EEMinus ident exp -> failure x
  ElOr exp1 exp2 -> failure x
  ElAnd exp1 exp2 -> failure x
  EEq exp1 exp2 -> failure x
  ENEq exp1 exp2 -> failure x
  ELt exp1 exp2 -> failure x
  ELtE exp1 exp2 -> failure x
  ELt2 exp1 exp2 exp3 -> failure x
  EGt exp1 exp2 -> failure x
  EGtE exp1 exp2 -> failure x
  EGt2 exp1 exp2 exp3 -> failure x
  EAdd exp1 exp2 -> failure x
  ESub exp1 exp2 -> failure x
  EMul exp1 exp2 -> failure x
  EDiv exp1 exp2 -> failure x
  Call ident exps -> failure x
  EVarArr ident exp -> failure x
  EStrAtt ident1 ident2 -> failure x
  EPPos exp -> failure x
  EMMin exp -> failure x
  ENeg exp -> failure x
  EPos exp -> failure x
  EVar ident -> failure x
  EStr string -> failure x
  EI32 integer -> failure x
  EI64 integer -> failure x
  EF32 double -> failure x
  EF64 double -> failure x
  EBool tokenbool -> failure x
transType :: Type -> Result
transType x = case x of
  TI32 -> failure x
  TI64 -> failure x
  TF32 -> failure x
  TF64 -> failure x
  TStr -> failure x
  TBool -> failure x

