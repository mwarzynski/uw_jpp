{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module PrintGrammar where

-- pretty-printer generated by the BNF converter

import AbsGrammar
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else (' ':s))

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

instance Print TokenBool where
  prt _ (TokenBool i) = doc (showString ( i))



instance Print Program where
  prt i e = case e of
    Prog decls -> prPrec i 0 (concatD [prt 0 decls])

instance Print Decl where
  prt i e = case e of
    DStruct struct -> prPrec i 0 (concatD [prt 0 struct])
    DFunction function -> prPrec i 0 (concatD [prt 0 function])
    DVar var -> prPrec i 0 (concatD [prt 0 var, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Var where
  prt i e = case e of
    DVarOnly varonly -> prPrec i 0 (concatD [prt 0 varonly])
    DVarExpr varexpr -> prPrec i 0 (concatD [prt 0 varexpr])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Struct where
  prt i e = case e of
    IStruct id varonlys -> prPrec i 0 (concatD [doc (showString "struct"), prt 0 id, doc (showString "{"), prt 0 varonlys, doc (showString "}")])

instance Print Function where
  prt i e = case e of
    FunOne id vars type_ stms -> prPrec i 0 (concatD [doc (showString "fn"), prt 0 id, doc (showString "("), prt 0 vars, doc (showString ")"), doc (showString "->"), prt 0 type_, doc (showString "{"), prt 0 stms, doc (showString "}")])
    FunStr id1 vars id2 stms -> prPrec i 0 (concatD [doc (showString "fn"), prt 0 id1, doc (showString "("), prt 0 vars, doc (showString ")"), doc (showString "->"), prt 0 id2, doc (showString "{"), prt 0 stms, doc (showString "}")])
    FunNone id vars stms -> prPrec i 0 (concatD [doc (showString "fn"), prt 0 id, doc (showString "("), prt 0 vars, doc (showString ")"), doc (showString "->"), doc (showString "{"), prt 0 stms, doc (showString "}")])

instance Print VarOnly where
  prt i e = case e of
    Dec id type_ -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_])
    DecStruct id1 id2 -> prPrec i 0 (concatD [prt 0 id1, doc (showString ":"), prt 0 id2])
    DecDict id type_1 type_2 -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), doc (showString "{"), prt 0 type_1, doc (showString "->"), prt 0 type_2, doc (showString "}")])
    DecArrMul id type_ n -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), doc (showString "["), prt 0 type_, doc (showString "*"), prt 0 n, doc (showString "]")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print VarExpr where
  prt i e = case e of
    DecSet id type_ exp -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), prt 0 type_, doc (showString "="), prt 2 exp])
    DecArr id type_ exps -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), doc (showString "["), prt 0 type_, doc (showString "]"), doc (showString "="), doc (showString "["), prt 0 exps, doc (showString "]")])
    DecStructSet id1 id2 exp -> prPrec i 0 (concatD [prt 0 id1, doc (showString ":"), prt 0 id2, doc (showString "="), prt 2 exp])
    DecArrMulInit id type_ n exp -> prPrec i 0 (concatD [prt 0 id, doc (showString ":"), doc (showString "["), prt 0 type_, doc (showString "*"), prt 0 n, doc (showString "]"), doc (showString "="), doc (showString "["), prt 0 exp, doc (showString ","), doc (showString ".."), doc (showString "]")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Stm where
  prt i e = case e of
    SFunc function -> prPrec i 0 (concatD [prt 0 function])
    SDecl var -> prPrec i 0 (concatD [prt 0 var, doc (showString ";")])
    SExp exp -> prPrec i 0 (concatD [prt 0 exp, doc (showString ";")])
    SBlock stms -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stms, doc (showString "}")])
    SWhile exp stm -> prPrec i 0 (concatD [doc (showString "while"), prt 0 exp, prt 0 stm])
    SForD var exp1 exp2 stm -> prPrec i 0 (concatD [doc (showString "for"), prt 0 var, doc (showString ","), prt 0 exp1, doc (showString ","), prt 0 exp2, prt 0 stm])
    SForE exp1 exp2 exp3 stm -> prPrec i 0 (concatD [doc (showString "for"), prt 0 exp1, doc (showString ","), prt 0 exp2, doc (showString ","), prt 0 exp3, prt 0 stm])
    SIf exp stm -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, prt 0 stm])
    SIfElse exp stm1 stm2 -> prPrec i 0 (concatD [doc (showString "if"), prt 0 exp, prt 0 stm1, doc (showString "else"), prt 0 stm2])
    SReturnOne exp -> prPrec i 0 (concatD [doc (showString "return"), prt 0 exp, doc (showString ";")])
    SReturn -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    SJContinue -> prPrec i 0 (concatD [doc (showString "continue"), doc (showString ";")])
    SJBreak -> prPrec i 0 (concatD [doc (showString "break"), doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print Exp where
  prt i e = case e of
    EAss id exp -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 3 exp])
    EAssArr id exp1 exp2 -> prPrec i 0 (concatD [prt 0 id, doc (showString "["), prt 6 exp1, doc (showString "]"), doc (showString "="), prt 3 exp2])
    EAssStr id1 id2 exp -> prPrec i 0 (concatD [prt 0 id1, doc (showString "."), prt 0 id2, doc (showString "="), prt 2 exp])
    EEPlus id exp -> prPrec i 2 (concatD [prt 0 id, doc (showString "+="), prt 2 exp])
    EEMinus id exp -> prPrec i 2 (concatD [prt 0 id, doc (showString "-="), prt 2 exp])
    ElOr exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "||"), prt 3 exp2])
    ElAnd exp1 exp2 -> prPrec i 3 (concatD [prt 3 exp1, doc (showString "&&"), prt 3 exp2])
    EEq exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "=="), prt 4 exp2])
    ENEq exp1 exp2 -> prPrec i 4 (concatD [prt 4 exp1, doc (showString "!="), prt 4 exp2])
    ELt exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "<"), prt 5 exp2])
    ELtE exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "<="), prt 5 exp2])
    ELt2 exp1 exp2 exp3 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString "<"), prt 5 exp2, doc (showString "<"), prt 5 exp3])
    EGt exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString ">"), prt 5 exp2])
    EGtE exp1 exp2 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString ">="), prt 5 exp2])
    EGt2 exp1 exp2 exp3 -> prPrec i 5 (concatD [prt 5 exp1, doc (showString ">"), prt 5 exp2, doc (showString ">"), prt 5 exp3])
    EAdd exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "+"), prt 6 exp2])
    ESub exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "-"), prt 6 exp2])
    EMul exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "*"), prt 6 exp2])
    EDiv exp1 exp2 -> prPrec i 6 (concatD [prt 6 exp1, doc (showString "/"), prt 6 exp2])
    Call id exps -> prPrec i 7 (concatD [prt 0 id, doc (showString "("), prt 0 exps, doc (showString ")")])
    EVarArr id exp -> prPrec i 7 (concatD [prt 0 id, doc (showString "["), prt 6 exp, doc (showString "]")])
    EStrAtt id1 id2 -> prPrec i 7 (concatD [prt 0 id1, doc (showString "."), prt 0 id2])
    EPPos id -> prPrec i 7 (concatD [prt 0 id, doc (showString "++")])
    EMMin id -> prPrec i 7 (concatD [prt 0 id, doc (showString "--")])
    EBNeg exp -> prPrec i 7 (concatD [doc (showString "!"), prt 7 exp])
    ENeg exp -> prPrec i 7 (concatD [doc (showString "-"), prt 7 exp])
    EPos exp -> prPrec i 7 (concatD [doc (showString "+"), prt 7 exp])
    EVar id -> prPrec i 7 (concatD [prt 0 id])
    EStr str -> prPrec i 7 (concatD [prt 0 str])
    EInt n -> prPrec i 7 (concatD [prt 0 n])
    EFloat d -> prPrec i 7 (concatD [prt 0 d])
    EBool tokenbool -> prPrec i 7 (concatD [prt 0 tokenbool])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print Type where
  prt i e = case e of
    TInt -> prPrec i 0 (concatD [doc (showString "int")])
    TFloat -> prPrec i 0 (concatD [doc (showString "float")])
    TStr -> prPrec i 0 (concatD [doc (showString "str")])
    TBool -> prPrec i 0 (concatD [doc (showString "bool")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])

