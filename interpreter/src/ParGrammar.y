-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParGrammar where
import AbsGrammar
import LexGrammar
import ErrM

}

%name pProgram Program
%name pDecl Decl
%name pVar Var
%name pStruct Struct
%name pFunction Function
%name pVarOnly VarOnly
%name pVarExpr VarExpr
%name pListStm ListStm
%name pListDecl ListDecl
%name pListVarOnly ListVarOnly
%name pListVarExpr ListVarExpr
%name pListVar ListVar
%name pListIdent ListIdent
%name pStm Stm
%name pExp Exp
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp1 Exp1
%name pListExp ListExp
%name pType Type
%name pListType ListType
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '&&' { PT _ (TS _ 3) }
  '(' { PT _ (TS _ 4) }
  ')' { PT _ (TS _ 5) }
  '*' { PT _ (TS _ 6) }
  '+' { PT _ (TS _ 7) }
  '++' { PT _ (TS _ 8) }
  '+=' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '-=' { PT _ (TS _ 13) }
  '->' { PT _ (TS _ 14) }
  '.' { PT _ (TS _ 15) }
  '..' { PT _ (TS _ 16) }
  '/' { PT _ (TS _ 17) }
  ':' { PT _ (TS _ 18) }
  ';' { PT _ (TS _ 19) }
  '<' { PT _ (TS _ 20) }
  '<=' { PT _ (TS _ 21) }
  '=' { PT _ (TS _ 22) }
  '==' { PT _ (TS _ 23) }
  '>' { PT _ (TS _ 24) }
  '>=' { PT _ (TS _ 25) }
  '[' { PT _ (TS _ 26) }
  ']' { PT _ (TS _ 27) }
  'bool' { PT _ (TS _ 28) }
  'break' { PT _ (TS _ 29) }
  'continue' { PT _ (TS _ 30) }
  'else' { PT _ (TS _ 31) }
  'float' { PT _ (TS _ 32) }
  'fn' { PT _ (TS _ 33) }
  'for' { PT _ (TS _ 34) }
  'if' { PT _ (TS _ 35) }
  'int' { PT _ (TS _ 36) }
  'return' { PT _ (TS _ 37) }
  'str' { PT _ (TS _ 38) }
  'struct' { PT _ (TS _ 39) }
  'while' { PT _ (TS _ 40) }
  '{' { PT _ (TS _ 41) }
  '||' { PT _ (TS _ 42) }
  '}' { PT _ (TS _ 43) }

L_ident  { PT _ (TV $$) }
L_integ  { PT _ (TI $$) }
L_quoted { PT _ (TL $$) }
L_doubl  { PT _ (TD $$) }
L_TokenBool { PT _ (T_TokenBool $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
String  :: { String }  : L_quoted {  $1 }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
TokenBool    :: { TokenBool} : L_TokenBool { TokenBool ($1)}

Program :: { Program }
Program : ListDecl { AbsGrammar.Prog (reverse $1) }
Decl :: { Decl }
Decl : Struct { AbsGrammar.DStruct $1 }
     | Function { AbsGrammar.DFunction $1 }
     | Var ';' { AbsGrammar.DVar $1 }
Var :: { Var }
Var : VarOnly { AbsGrammar.DVarOnly $1 }
    | VarExpr { AbsGrammar.DVarExpr $1 }
Struct :: { Struct }
Struct : 'struct' Ident '{' ListVarOnly '}' { AbsGrammar.IStruct $2 $4 }
Function :: { Function }
Function : 'fn' Ident '(' ListVar ')' '->' Type '{' ListStm '}' { AbsGrammar.FunOne $2 $4 $7 (reverse $9) }
         | 'fn' Ident '(' ListVar ')' '->' Ident '{' ListStm '}' { AbsGrammar.FunStr $2 $4 $7 (reverse $9) }
         | 'fn' Ident '(' ListVar ')' '->' '{' ListStm '}' { AbsGrammar.FunNone $2 $4 (reverse $8) }
VarOnly :: { VarOnly }
VarOnly : Ident ':' Type { AbsGrammar.Dec $1 $3 }
        | Ident ':' Ident { AbsGrammar.DecStruct $1 $3 }
        | Ident ':' '{' Type '->' Type '}' { AbsGrammar.DecDict $1 $4 $6 }
        | Ident ':' '[' Type '*' Integer ']' { AbsGrammar.DecArrMul $1 $4 $6 }
VarExpr :: { VarExpr }
VarExpr : Ident ':' Type '=' Exp2 { AbsGrammar.DecSet $1 $3 $5 }
        | Ident ':' '[' Type ']' '=' '[' ListExp ']' { AbsGrammar.DecArr $1 $4 $8 }
        | Ident ':' Ident '=' Exp2 { AbsGrammar.DecStructSet $1 $3 $5 }
        | Ident ':' '[' Type '*' Integer ']' '=' '[' Exp ',' '..' ']' { AbsGrammar.DecArrMulInit $1 $4 $6 $10 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
ListDecl :: { [Decl] }
ListDecl : {- empty -} { [] } | ListDecl Decl { flip (:) $1 $2 }
ListVarOnly :: { [VarOnly] }
ListVarOnly : {- empty -} { [] }
            | VarOnly { (:[]) $1 }
            | VarOnly ',' ListVarOnly { (:) $1 $3 }
ListVarExpr :: { [VarExpr] }
ListVarExpr : {- empty -} { [] }
            | VarExpr { (:[]) $1 }
            | VarExpr ',' ListVarExpr { (:) $1 $3 }
ListVar :: { [Var] }
ListVar : {- empty -} { [] }
        | Var { (:[]) $1 }
        | Var ',' ListVar { (:) $1 $3 }
ListIdent :: { [Ident] }
ListIdent : Ident { (:[]) $1 } | Ident ',' ListIdent { (:) $1 $3 }
Stm :: { Stm }
Stm : Function { AbsGrammar.SFunc $1 }
    | Var ';' { AbsGrammar.SDecl $1 }
    | Exp ';' { AbsGrammar.SExp $1 }
    | '{' ListStm '}' { AbsGrammar.SBlock (reverse $2) }
    | 'while' Exp Stm { AbsGrammar.SWhile $2 $3 }
    | 'for' Var ',' Exp ',' Exp Stm { AbsGrammar.SForD $2 $4 $6 $7 }
    | 'for' Exp ',' Exp ',' Exp Stm { AbsGrammar.SForE $2 $4 $6 $7 }
    | 'if' Exp Stm { AbsGrammar.SIf $2 $3 }
    | 'if' Exp Stm 'else' Stm { AbsGrammar.SIfElse $2 $3 $5 }
    | 'return' Exp ';' { AbsGrammar.SReturnOne $2 }
    | 'return' ';' { AbsGrammar.SReturn }
    | 'continue' ';' { AbsGrammar.SJContinue }
    | 'break' ';' { AbsGrammar.SJBreak }
Exp :: { Exp }
Exp : Ident '=' Exp3 { AbsGrammar.EAss $1 $3 }
    | Ident '[' Exp6 ']' '=' Exp3 { AbsGrammar.EAssArr $1 $3 $6 }
    | Ident '.' Ident '=' Exp2 { AbsGrammar.EAssStr $1 $3 $5 }
    | Exp1 { $1 }
Exp2 :: { Exp }
Exp2 : Ident '+=' Exp2 { AbsGrammar.EEPlus $1 $3 }
     | Ident '-=' Exp2 { AbsGrammar.EEMinus $1 $3 }
     | Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '||' Exp3 { AbsGrammar.ElOr $1 $3 }
     | Exp3 '&&' Exp3 { AbsGrammar.ElAnd $1 $3 }
     | Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '==' Exp4 { AbsGrammar.EEq $1 $3 }
     | Exp4 '!=' Exp4 { AbsGrammar.ENEq $1 $3 }
     | Exp5 { $1 }
Exp5 :: { Exp }
Exp5 : Exp5 '<' Exp5 { AbsGrammar.ELt $1 $3 }
     | Exp5 '<=' Exp5 { AbsGrammar.ELtE $1 $3 }
     | Exp5 '<' Exp5 '<' Exp5 { AbsGrammar.ELt2 $1 $3 $5 }
     | Exp5 '>' Exp5 { AbsGrammar.EGt $1 $3 }
     | Exp5 '>=' Exp5 { AbsGrammar.EGtE $1 $3 }
     | Exp5 '>' Exp5 '>' Exp5 { AbsGrammar.EGt2 $1 $3 $5 }
     | Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp6 '+' Exp6 { AbsGrammar.EAdd $1 $3 }
     | Exp6 '-' Exp6 { AbsGrammar.ESub $1 $3 }
     | Exp6 '*' Exp6 { AbsGrammar.EMul $1 $3 }
     | Exp6 '/' Exp6 { AbsGrammar.EDiv $1 $3 }
     | Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Ident '(' ListExp ')' { AbsGrammar.Call $1 $3 }
     | Ident '[' Exp6 ']' { AbsGrammar.EVarArr $1 $3 }
     | Ident '.' Ident { AbsGrammar.EStrAtt $1 $3 }
     | Ident '++' { AbsGrammar.EPPos $1 }
     | Ident '--' { AbsGrammar.EMMin $1 }
     | '!' Exp7 { AbsGrammar.EBNeg $2 }
     | '-' Exp7 { AbsGrammar.ENeg $2 }
     | '+' Exp7 { AbsGrammar.EPos $2 }
     | Ident { AbsGrammar.EVar $1 }
     | String { AbsGrammar.EStr $1 }
     | Integer { AbsGrammar.EInt $1 }
     | Double { AbsGrammar.EFloat $1 }
     | TokenBool { AbsGrammar.EBool $1 }
     | '(' Exp ')' { $2 }
Exp1 :: { Exp }
Exp1 : Exp2 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Type :: { Type }
Type : 'int' { AbsGrammar.TInt }
     | 'float' { AbsGrammar.TFloat }
     | 'str' { AbsGrammar.TStr }
     | 'bool' { AbsGrammar.TBool }
ListType :: { [Type] }
ListType : {- empty -} { [] }
         | Type { (:[]) $1 }
         | Type ',' ListType { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

